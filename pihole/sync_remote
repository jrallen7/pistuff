#!/usr/bin/python3
import os,subprocess,sys
import urllib.request
import codecs


def fetchListRemote(url):
    with urllib.request.urlopen(url) as response:
        fdata = set(foo.strip() for foo in \
            codecs.decode(response.read(), 'utf-8', 'strict').split('\n'))
    return {foo for foo in fdata if len(foo) > 0 and not foo.startswith('#')}

def readListLocal(filename):
    with open(filename, 'rt') as fi:
        fdata = set(foo.strip() for foo in fi.read().split('\n'))
    return {foo for foo in fdata if len(foo) > 0 and not foo.startswith('#')}

if __name__ == '__main__':

    flaggravityrefresh = False
    uploadneeded = False

    adlistLocRemote = r'https://v.firebog.net/hosts/lists.php?type=tick'
    adlistLocLocal = r'/etc/pihole/PyPhDB/adlists.list'
    
    whitelistLocRemote = r'https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/whitelist.txt'
    whitelistLocLocal = r'/etc/pihole/PyPhDB/whitelist.list'
    whitelistLocCustom = 'whitelist.custom.txt'

    ### Root Permission Check
    print('Checking root permissions... ', end='')
    if os.geteuid() != 0:
        print('not root, escalating')
        #use this version for python 3.4 or before...
        #subprocess.call(['sudo', 'python3'] + sys.argv)
        #use this version for python 3.5 or later...
        subprocess.call(['sudo', 'python3', *sys.argv])
        quit()
    
    print('root, continuing')

    subprocess.call('./PyPhDB_dump')

    print('fetching remote block lists')
    blocklistremote = fetchListRemote(adlistLocRemote)
    print('reading local block lists')
    blocklistlocal = readListLocal(adlistLocLocal)

    print('fetching remote whitelist')
    whitelistremote = fetchListRemote(whitelistLocRemote)
    print(len(whitelistremote))
    print('reading local whitelist')
    whitelistlocal = readListLocal(whitelistLocLocal)
    print(len(whitelistlocal))
    print('reading custom whitelist')
    whitelistcustom = readListLocal(whitelistLocCustom)
    print(len(whitelistcustom))

    whitelisttotal = whitelistremote | whitelistcustom

    print('-'*70)

    if blocklistlocal == blocklistremote:
        print('ad lists match, nothing to do')
    else:
        print('ad lists mismatch')
        missinglists = blocklistremote-blocklistlocal
        extralists = blocklistlocal-blocklistremote

        if len(missinglists) > 0:
            print('lists in remote but not in local (to be added)')
            for xxxxx in missinglists:
                print(xxxxx,end=' ')
            print()

        if len(extralists) > 0:
            print('lists in local but not in remote (to be deleted)')
            for xxxxx in extralists:
                print(xxxxx)
            print()

        with open('/etc/pihole/PyPhDB/adlists.list', 'w') as fo:
            for xxx in blocklistremote:
                fo.write('{}\n'.format(xxx))
        flaggravityrefresh = True
        uploadneeded = True

    print('-'*70)

    if whitelisttotal == whitelistlocal:
        print('whitelist match, nothing to do')
    else:
        print('whitelist mismatch')
        extralists = whitelistlocal - whitelisttotal
        missinglists = whitelisttotal - whitelistlocal

        if len(missinglists) > 0:
            print('lists in remote but not in local (to be added)')
            for xxxxx in missinglists:
                print(xxxxx,end=' ')
            print()

        if len(extralists) > 0:
            print('lists in local but not in remote (to be deleted)')
            for xxxxx in extralists:
                print(xxxxx)
            print()

        with open(whitelistLocLocal, 'w') as fo:
            for xxx in whitelisttotal:
                fo.write('{}\n'.format(xxx))
        uploadneeded = True


    if uploadneeded:
        subprocess.call('./PyPhDB_upload')
    if flaggravityrefresh:
        print('refreshing gravity')
        subprocess.call(['pihole', '-g'])
        
    print('-'*70)
    subprocess.call('./PyPhDB_clean')
